Hello!

This tool was developed in EIFER - European Institute for Energy Research, Karlsruhe, Germany,
In the working group N45 - Energy Planning and Geosimulation.

It is used to generate CityGML - files containing Lod1 or LoD2 buildings (flat roofs only), 
from geometries which are stored in a postgis data base.
The project was created in Eclipse using PyDev.

The README file will explain in a few steps what you will need to do 
and what criteria your data source file has to fulfil. 

I like to point out that the file "genCityGML.py" is a adapted version of the
script "generateCityGML.py" from Random3Dcity (http://github.com/tudelft3d/Random3Dcity),  
a tool developed by Filip Biljecki at TU Delft. Version: 2015-10-05
The other scripts of the tool where programmed to work with the modified version.

The example is given for a shape file. There is a sample shape file added for test run.

Steps one to three can be easily done using the software QGIS (version 2.8 or higher).

1. Your shape file should contain following, if not add (e.g. sample file: tpk_karlsruhe.shp):
   a) Geometry, of building footprints
   b) Elevation / terrain height information for each footprint: as INTEGER
   c) Building height information for each footprint, either given as:
      - number of floors above ground: as INTEGER
      OR
      - as measured height: as FLOAT or INTEGER
   d) A unique ID for each footprint: as INTEGER
      A serial number (= primary key; auto generated by DB-Manager) will do the work if you like it simple,
      this is mainly for you to be able to easier identify specific buildings later on if you need to.
   e) Last but not least, the file should be referenced in a valid / by postgis known EPSG code.

2. a) Set up a postgreSQL data base.
   b) Install the extension postgis on your data base.

3. Import your shape file into your postgis data base, into the public schema.
   This can be easily done using the DB-Manager tool of QGIS. (recommended, QGIS 2.8 or higher)
   Define the table name for import, for the remaining settings use defaults.

4. Configure the "inputPara.py" file settings for:
   - Chose a LoD option:
     - 1: buildings as LoD1 solids
     - 2: buildings as LoD2 multisurface (will only generate flat roofs)
   - Input Parameter for DB-Connection
   - Table column names of building data set

5. Run genCityGML.py
   FYI: The CityGML file will be stored into the same folder as the main script "genCityGML.py"
   The script gives a print out about different informations to your model during the generating process. As like:
   - SRID / EPSG
   - extent of generated bounding box of the whole 3d model
   - number of buildings that where queried from DB-table
   - name of the written CityGML file.
   The file name will be generated from:
     - the table name of your data set
     - the SRID / EPSG code
     - the LoD you have chosen

Known issue for polygons with holes:
The script works in general fine as long as the geometry objects are valid according to topological rules of geo-data bases:
A source for these rules can be found for example at arcgis.com (link below; last checked: 2016-10-27)

http://desktop.arcgis.com/en/arcmap/10.3/manage-data/editing-topology/geodatabase-topology-rules-and-topology-error-fixes.htm

How ever, currently it does not work properly for polygons with a hole inside (donut shaped polygons, somehow the separate line rings 
of these objects are very often wrongly oriented to each other and cause therefore problems, I haven't found jet a solution to handle them in 
a general way). 
Also if your polygon are oriented wrong (footprint normal vector is pointing up instead of down; right hand rule) 
the generated surfaces for the building will all be facing into the wrong direction (facing into the building instead of 
facing to the outside).
There is a function in the getData.py script called "getBuiAttrib_rhr()"
which will force your polygons into the correct orientation if you have problems with surfaces facing into the wrong direction,
but this does not always work or results sometimes into other problems like strange building structures
(usually because a polygon object is somehow not correct).
So it is not used in general. How ever, if facing such a problem it could help in some cases.
To use it change in the script "objGenrator.py" the lines where the function "getBuiAttrib()" is called to "getBuiAttrib_rhr()"